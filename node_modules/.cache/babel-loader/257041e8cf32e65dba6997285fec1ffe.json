{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { logger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './rootReducer';\nimport ReduxThunk from 'redux-thunk';\nimport { sessionService } from 'redux-react-session';\nconst env = process.env.NODE_ENV || \"development\";\nlet middleware = [];\n\nif (env === \"development\") {\n  middleware = [logger, ReduxThunk];\n} else {\n  middleware = [ReduxThunk];\n}\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\n\nconst validateSession = session => {\n  // check if your session is still valid\n  console.log(session);\n  return true;\n};\n\nconst options = {\n  refreshOnCheckAuth: true,\n  redirectPath: '/',\n  driver: 'COOKIES',\n  validateSession\n};\nsessionService.initSessionService(store, options).then(() => {\n  if (env === \"development\") {\n    console.log('Redux React Session is ready and a session was refreshed from your storage');\n  }\n}).catch(() => {\n  if (env === \"development\") {\n    console.log('Redux React Session is ready and there is no session in your storage');\n  }\n});\nsessionService.initSessionService(store);\nexport default store;","map":{"version":3,"sources":["/home/karan-zoop/Documents/GitProjects/Redux/src/redux/reduxStore.js"],"names":["createStore","applyMiddleware","logger","composeWithDevTools","rootReducer","ReduxThunk","sessionService","env","process","NODE_ENV","middleware","store","validateSession","session","console","log","options","refreshOnCheckAuth","redirectPath","driver","initSessionService","then","catch"],"mappings":"AAAA,SACCA,WADD,EAECC,eAFD,QAGO,OAHP;AAIA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,MAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AAEA,IAAIC,UAAU,GAAG,EAAjB;;AAEA,IAAGH,GAAG,KAAK,aAAX,EAA0B;AACzBG,EAAAA,UAAU,GAAG,CAACR,MAAD,EAASG,UAAT,CAAb;AACA,CAFD,MAGK;AACJK,EAAAA,UAAU,GAAG,CAACL,UAAD,CAAb;AACA;;AAED,MAAMM,KAAK,GAAGX,WAAW,CACxBI,WADwB,EAExBD,mBAAmB,CAACF,eAAe,CAAC,GAAGS,UAAJ,CAAhB,CAFK,CAAzB;;AAMA,MAAME,eAAe,GAAIC,OAAD,IAAa;AACpC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,SAAO,IAAP;AACA,CAJD;;AAKA,MAAMG,OAAO,GAAG;AAAEC,EAAAA,kBAAkB,EAAE,IAAtB;AAA4BC,EAAAA,YAAY,EAAE,GAA1C;AAA+CC,EAAAA,MAAM,EAAE,SAAvD;AAAkEP,EAAAA;AAAlE,CAAhB;AAEAN,cAAc,CAACc,kBAAf,CAAkCT,KAAlC,EAAyCK,OAAzC,EACCK,IADD,CACM,MAAM;AACX,MAAGd,GAAG,KAAK,aAAX,EAA0B;AACzBO,IAAAA,OAAO,CAACC,GAAR,CAAY,4EAAZ;AACA;AACD,CALD,EAMCO,KAND,CAMO,MAAM;AACZ,MAAGf,GAAG,KAAK,aAAX,EAA0B;AACzBO,IAAAA,OAAO,CAACC,GAAR,CAAY,sEAAZ;AACA;AACD,CAVD;AAYAT,cAAc,CAACc,kBAAf,CAAkCT,KAAlC;AAEA,eAAeA,KAAf","sourcesContent":["import { \n\tcreateStore, \n\tapplyMiddleware \n} from 'redux';\nimport { logger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './rootReducer';\nimport ReduxThunk from 'redux-thunk';\nimport { sessionService } from 'redux-react-session';\nconst env = process.env.NODE_ENV || \"development\";\n\nlet middleware = [];\n\nif(env === \"development\") {\n\tmiddleware = [logger, ReduxThunk]\n}\nelse {\n\tmiddleware = [ReduxThunk]\n}\n\nconst store = createStore(\n\trootReducer,\n\tcomposeWithDevTools(applyMiddleware(...middleware))\n);\n\n\nconst validateSession = (session) => {\n\t// check if your session is still valid\n\tconsole.log(session)\n\treturn true;\n}\nconst options = { refreshOnCheckAuth: true, redirectPath: '/', driver: 'COOKIES', validateSession };\n\nsessionService.initSessionService(store, options)\n.then(() => {\n\tif(env === \"development\") {\n\t\tconsole.log('Redux React Session is ready and a session was refreshed from your storage')\n\t}\n})\n.catch(() => {\n\tif(env === \"development\") {\n\t\tconsole.log('Redux React Session is ready and there is no session in your storage')\n\t}\n});\n\nsessionService.initSessionService(store);\n\nexport default store;\n  "]},"metadata":{},"sourceType":"module"}